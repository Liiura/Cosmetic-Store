@page "/SeparatedOrder"
<h3>SeparatedOrder</h3>
@using BlazorAppShared.DTO
@using BlazorApp.Interfaces;
@using CurrieTechnologies.Razor.SweetAlert2;
@using System.Text.Json;
@inject SweetAlertService Swal;
@inject IClientService clientService;
@inject IProductService productService;
@inject IJSRuntime JS;
@inject IPromotionService promotionService;
@inject NavigationManager navigationManager
<h3>Separated Order</h3>
@if (products == null)
{
    <strong>Loading data...</strong>
}
else
{
    <strong>Total: $@total</strong>
    <p>
        Avaible Promotion:
        @if (promotion != null)
        {
            <strong>@promotion.PromotionName with this discount %@promotion.PromotionPercentage</strong>
        }
        else
        {
            <strong>There is not an available promotions for this separation</strong>
        }
    </p>
    <div class="row row-cols-1 row-cols-md-2">
        @foreach (var item in products)
        {
            <div class="card" style="width: 18rem; margin-right: 5px; margin-bottom: 5px">
                <div class="card-body">
                    <h5 class="card-title">@item.Name</h5>
                    <hr style="margin-top: -3px" />
                    <p class="card-text"><strong>Total:</strong>$@(item.Price * item.Quantity)</p>
                    <p class="card-text">Quantity to separate: @item.Quantity</p>
                </div>
            </div>
        }
    </div>
    <button class="btn btn-success" type="button" @onclick="CreateSeparationOrder">Separate Order</button>
}

@code {
    List<ProductDTO>? products = null;
    List<PromotionDTO> promotions = new List<PromotionDTO>();
    PromotionDTO? promotion = null;
    decimal total = 0;
    protected override async Task OnInitializedAsync()
    {
        string localStoragePurchaseOrderString = await JS.InvokeAsync<string>("localStorage.getItem", "separatedOrder");
        products = JsonSerializer.Deserialize<List<ProductDTO>>(localStoragePurchaseOrderString);
        promotions = await promotionService.GetAllPromotions();
        if (products != null)
        {
            total = products.Sum(x => x.Quantity * x.Price);
            promotion = promotions.LastOrDefault(x => total >= x.MinimalAmount && total < x.MaximalAmount );
        }
    }
    private async Task CreateSeparationOrder()
    {
        var visitorCookie = await GetCookie("visitorId");
        var mapData = products.Select(x => new CreateEditClientSeparationProductDetailDTO { ProductId = x.Id.Value, SeparatedQuantity = x.Quantity }).ToList();
        var getClient = await clientService.GetClient(visitorCookie);
        if (getClient.Status >= 200 && getClient.Status < 300)
        {
            var response = await clientService.SeparateProducts(mapData, getClient.Value.Id.Value, promotion != null ? promotion.Id : null);
            if (response.Status >= 200 && response.Status < 300)
            {
                await Swal.FireAsync("Separation", response.Message, SweetAlertIcon.Success);
                await JS.InvokeAsync<string>("localStorage.removeItem", "separatedOrder");
                navigationManager.NavigateTo("/SeparateProducts");
            }
            else
            {
                await Swal.FireAsync("Client", getClient.Message, SweetAlertIcon.Error);

            }
        }
        else
        {
            await Swal.FireAsync("Client", getClient.Message, SweetAlertIcon.Error);
        }
    }
    public async Task<string> GetCookie(string cookieName)
    {
        return await JS.InvokeAsync<string>("eval", $"document.cookie.split(';').find(c => c.trim().startsWith('{cookieName}='))?.split('=')[1]");
    }

}