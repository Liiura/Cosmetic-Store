@page "/PurchaseProducts"
@using BlazorAppShared.DTO
@using BlazorApp.Interfaces;
@using CurrieTechnologies.Razor.SweetAlert2;
@using System.Text.Json;
@inject SweetAlertService Swal;
@inject IClientService clientService;
@inject IProductService productService;
@inject ISeparatePlanService separatePlanService;
@inject IJSRuntime JS;
<h3>Purchase Cosmetics</h3>
@if (products == null)
{
    <strong>Loading data...</strong>
}
else
{
    if (isACurrentPurchase)
    {
        <a class="btn btn-success" href="PurchaseOrder">See my purchase</a>
        <br />
        <p>If you separate your purchase now you can access to the follow discounts</p>
        <ol class="list-group list-group-numbered">
            @foreach (var item in separatePlans)
            {
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">@item.SeparatePlanName</div>
                        For purchases over @item.SeparateValue you can separate for the %@item.SeparatePlanPercentage of discount
                    </div>
                </li>
            }
        </ol>
    }
    <br />
    <div class="row row-cols-1 row-cols-md-2">
        @foreach (var item in products)
        {
            var purchaseProductDetail = purchaseProductDetails.FirstOrDefault(p => p.ProductId == item.Id);

            if (purchaseProductDetail == null)
            {
                purchaseProductDetail = new CreateEditClientProductPurchaseDetailDTO { ProductId = item.Id.Value };
                purchaseProductDetails.Add(purchaseProductDetail);
            }
            <div class="card" style="width: 18rem; margin-right: 5px; margin-bottom: 5px">
                <div class="card-body">
                    <h5 class="card-title">@item.Name</h5>
                    <hr style="margin-top: -3px" />
                    <p class="card-text"><strong>Price</strong> @item.Price</p>
                    <EditForm Model="purchaseProductDetail" OnValidSubmit="@(() => OnValidSubmit(purchaseProductDetail) )">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="mb-3">
                            <input type="hidden" id="ProductId_@item.Id" name="ProductId" value="@item.Id" />
                            <label class="form-label">Quantity</label>
                            <InputNumber class="form-control" @bind-Value="purchaseProductDetail.QuantityPurchase"></InputNumber>
                            <ValidationMessage For="@(() => purchaseProductDetail.QuantityPurchase)"></ValidationMessage>
                        </div>
                        <button type="submit" class="btn btn-success">Purchase</button>
                    </EditForm>
                </div>
            </div>
        }
    </div>
}

@code {
    List<ProductDTO>? products = null;
    bool isACurrentPurchase = false;
    List<SeparatePlanDTO> separatePlans = new List<SeparatePlanDTO>();
    List<CreateEditClientProductPurchaseDetailDTO> purchaseProductDetails = new List<CreateEditClientProductPurchaseDetailDTO>();
    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetAllProducts();
        separatePlans = await separatePlanService.GetAllSeparatePlans();
        isACurrentPurchase = !string.IsNullOrEmpty((await JS.InvokeAsync<string>("localStorage.getItem", "purchaseOrder")));
    }
    private async Task OnValidSubmit(CreateEditClientProductPurchaseDetailDTO purchaseProductDetail)
    {
        var productToPurchase = await productService.GetProductById(purchaseProductDetail.ProductId);
        string successMessage = "Cosmetic added to purchase order";
        if(productToPurchase.Status >=200 && productToPurchase.Status< 300)
        {
            if(purchaseProductDetail.QuantityPurchase <= productToPurchase.Value.Quantity)
            {
                productToPurchase.Value.Quantity = purchaseProductDetail.QuantityPurchase;
                string localStoragePurchaseOrderString = await JS.InvokeAsync<string>("localStorage.getItem", "purchaseOrder");
                List<ProductDTO>? localStoragePurchaseOrderList = null;
                if (!string.IsNullOrEmpty(localStoragePurchaseOrderString))
                {
                    localStoragePurchaseOrderList = JsonSerializer.Deserialize<List<ProductDTO>>(localStoragePurchaseOrderString);

                    var purchaseProductPreviously = localStoragePurchaseOrderList.FirstOrDefault(x => x.Id == purchaseProductDetail.ProductId);
                    if(purchaseProductPreviously == null)
                    {
                        localStoragePurchaseOrderList.Add(productToPurchase.Value);
                    }
                    else
                    {
                        localStoragePurchaseOrderList.First(x => x.Id == purchaseProductDetail.ProductId).Quantity += purchaseProductDetail.QuantityPurchase;
                        successMessage = "The cosmetic was previously added to the order so the quantity was updated";
                    }
                    await JS.InvokeVoidAsync("localStorage.setItem", "purchaseOrder", JsonSerializer.Serialize(localStoragePurchaseOrderList));
                }
                else
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "purchaseOrder", JsonSerializer.Serialize(new List<ProductDTO> { productToPurchase.Value }));
                }
                isACurrentPurchase = true;
                await Swal.FireAsync("Cosmetic", successMessage, SweetAlertIcon.Success);
            }
            else
            {
                await Swal.FireAsync("Cosmetic", "Sorry,There is not stock of this product with the quantity that you need", SweetAlertIcon.Error);
            }
        }
        else
        {
            await Swal.FireAsync("Cosmetic", productToPurchase.Message, SweetAlertIcon.Error);
        }
    }
}
